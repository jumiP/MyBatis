<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!-- 
	- The content of element type "configuration" must match 
	 "(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,
	 	plugins?,environments?,databaseIdProvider?,mappers?)".	// 이 순서대로 써주기
 -->
	<properties resource="/driver.properties"/>
	
	<typeAliases>
		<typeAlias type="member.model.vo.Member" alias="Member"/>
		<typeAlias type="board.model.vo.Board" alias="Board"/>
		<typeAlias type="board.model.vo.Reply" alias="Reply"/>
	</typeAliases>
		
	<!-- DB에 연결할 설정에 대한 정보 선언 -->
	<environments default="development">
	<!-- default : 연결 설정을 여러 개 생성하여 아이디로 구분해놓고, 기본으로 연결할 id 속성 설정 -->
	
		<!-- Database에 연결할 설정 정보 -->	
		<environment id="development">
			<!-- 트랜잭션을 누가 관리할 것인가에 대한 설정 -->
			<transactionManager type="JDBC"/>
			<!-- 
				- JDBC : JDBC가 커밋과 롤백을 직접 처리, 수동으로 commit
				- MANAGED : 커밋이나 롤백을 직접 하지 않는 대신 컨테이너가 트랜잭션의 모든 생명 주기를 관리, 자동으로 commit 
			 -->
			 
			 <!-- 실제 DB 접속에 관한 정보 설정 -->
			 <dataSource type="POOLED">
			 <!-- 
			 	type 속성은 ConnectionPool 사용 여부에 관한 설정
			 	- POOLED : 커넥션 객체를 미리 만들어 놓고 관리해서 꺼내쓰기 때문에 객체를 만드는 시간을 줄일 수 있음
			 				사용자의 요청이 들어왔을 때 DB에 연결하여 명령을 실행하고
			 				명령이 종료되어도 연결이 끊기지 않고 pool에 저장하여 요청이 올 때마다 pool에서 커넥션을 꺼내서 재사용
			 				(웹 서비스에서는 커넥션 풀을 이용하는 것이 좋음)
			 	- UNPOOLED : DB요청이 올 때마다 실시간으로 커넥션 객체를 만들고 닫아줌
			 				미리 커넥션 객체를 만들어놓는 방식이 아니기 때문에 조금 느릴 수 있음
			 				(데이터 조회/수정/삭제/삽입 요청 시 딜레이가 생겨도 문제 없는 간단한 애플리케이션에 적당함)
			  -->
<!-- 			  <property name="driver" value="oracle.jdbc.driver.OracleDriver"/> -->
<!-- 			  <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/> -->
<!-- 			  <property name="username" value="MyBatis"/> -->
<!-- 			  <property name="password" value="MyBatis"/> -->
 			<property name="driver" value="${driver}"/> 
			<property name="url" value="${url}"/>
			<property name="username" value="${username}"/> 
		  	<property name="password" value="${password}"/>
			
			
			</dataSource>
		</environment>
	</environments>
	
	<!-- mapper파일들을 등록 -->
	<mappers>
		<mapper resource="/mappers/member-mapper.xml"/>
		<mapper resource="/mappers/board-mapper.xml"/>
	</mappers>
	

</configuration>